// <auto-generated />

using System.Collections.Generic;
using System.Linq;
using FrameworkRepository.Helpers;
using FrameworkRepository.Interfaces;
using FrameworkRepository.Models;
using Microsoft.EntityFrameworkCore;

namespace FrameworkRepository
{
    public class RawRepository<TDbContext> : IRawRepository<TDbContext>
        where TDbContext : DbContext
    {
        private readonly TDbContext _context;

        public RawRepository(TDbContext context)
        {
            _context = context;
        }


        /// <inheritdoc/>
        public int ExecuteCommand(string command, params object[] parameters)
        {
            return _context.Database.ExecuteSqlRaw(command, parameters);
        }

        /// <inheritdoc/>
        public List<T> ExecuteCommandAndGetMultiple<T>(string command, params object[] parameters) where T : class, new()
        {
            return _context.Set<T>().FromSqlRaw(command, parameters).ToList();
        }

        /// <inheritdoc/>
        public List<T> ExecuteCommandAndGetPrimitiveList<T>(string command, params object[] parameters)
        {
            return _context.Database.GetPrimitiveList<T>(command, parameters);
        }

        /// <inheritdoc/>
        public T ExecuteCommandAndGetSingle<T>(string command, params object[] parameters) where T : class, new()
        {
            return _context.Set<T>().FromSqlRaw(command, parameters).AsEnumerable().FirstOrDefault();
        }

        /// <inheritdoc/>
        public TResult ExecuteScalarCommand<TResult>(string command, params object[] parameters)
        {
            return _context.Database.GetScalar<TResult>(command, parameters);
        }

        /// <inheritdoc/>
        public RawDataModel GetRawData(string command, params object[] parameters)
        {
            return _context.Database.GetRawData(command, parameters);
        }
    }
}
