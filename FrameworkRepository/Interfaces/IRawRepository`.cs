// <auto-generated />

using System.Collections.Generic;
using FrameworkRepository.Models;
using Microsoft.EntityFrameworkCore;

namespace FrameworkRepository.Interfaces
{
    public interface IRawRepository<TDbContext>
        where TDbContext : DbContext
    {
        /// <summary>
        /// Executes command and returns the first item only.
        /// </summary>
        /// <typeparam name="T">Type to map data into.</typeparam>
        /// <param name="command">Command string to execute, can be a procedure or just a simple query.</param>
        /// <param name="parameters">List of parameters used by command.</param>
        /// <returns>Single object of type T.</returns>
        T ExecuteCommandAndGetSingle<T>(string command, params object[] parameters)
            where T : class, new();

        /// <summary>
        /// Executes command and returns a list.
        /// </summary>
        /// <typeparam name="T">Type to map data into.</typeparam>
        /// <param name="command">Command string to execute, can be a procedure or just a simple query.</param>
        /// <param name="parameters">List of parameters used by command.</param>
        /// <returns>A list of type T.</returns>
        List<T> ExecuteCommandAndGetMultiple<T>(string command, params object[] parameters)
            where T : class, new();

        /// <summary>
        /// Executes command and returns a list of primitive type.
        /// </summary>
        /// <typeparam name="T">Type to map data into.</typeparam>
        /// <param name="command">Command string to execute, can be a procedure or just a simple query.</param>
        /// <param name="parameters">List of parameters used by command.</param>
        /// <returns>A list of type T.</returns>
        List<T> ExecuteCommandAndGetPrimitiveList<T>(string command, params object[] parameters);

        /// <summary>
        /// Executes a command and returns number of records affected.
        /// </summary>
        /// <param name="command">Command string to execute, can be a procedure or just a simple query.</param>
        /// <param name="parameters">List of parameters used by command.</param>
        /// <returns>Number of records affected.</returns>
        int ExecuteCommand(string command, params object[] parameters);

        /// <summary>
        /// Executes a command and returns the value of first cell of the first row.
        /// </summary>
        /// <typeparam name="TResult">Cell value type.</typeparam>
        /// <param name="command">Command string to execute, can be a procedure or just a simple query.</param>
        /// <param name="parameters">List of parameters used by command.</param>
        /// <returns>Value casted as type TResult.</returns>
        TResult ExecuteScalarCommand<TResult>(string command, params object[] parameters);

        /// <summary>
        /// Executes a command returns data in a table like model.
        /// </summary>
        /// <param name="command">Command string to execute, can be a procedure or just a simple query.</param>
        /// <param name="parameters">List of parameters used by command.</param>
        /// <returns>A model consisting of header names and rows values.</returns>
        RawDataModel GetRawData(string command, params object[] parameters);
    }
}
